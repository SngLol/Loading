#!/bin/bash
#$key = input

prcsc=100
sc=2
prc=0					#Percent % [currency]
prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
#Percent % [display]
ppp=1					#Percent per press
pppd=$(echo "scale=$sc; x=$ppp/$prcsc; if(x<1) print 0; x" | bc)
#Percent per press [display]


PP=50	 				#Pressing Power Price [shop]
PPd=$(echo "scale=$sc; x=$PP/$prcsc; if(x<1) print 0; x" | bc)
#Pressing Power Price [display]
PPrise=0				#Price Rise of PP
hvPP=0					#Amount of PP's Bought [stats]

PB=250					#Progress Blessing Price [shop]
PBd=$(echo "scale=$sc; x=$PB/$prcsc; if(x<1) print 0; x" | bc)
#Pressing Power Price [display]
PBrise=0				#Price Rise of PB
hvPB=0					#Amount of PB's Bought [stats]
PBap=$(($prc/10000))
PBa=$(($PBap*$hvPB))			#Extra ppp for each 0.01%
PBad=$(echo "scale=$sc; x=$PBa/$prcsc; if(x<1) print 0; x" | bc)
#Extra ppp for each 0.01% [display]

EC=500
ECd=$(echo "scale=$sc; x=$EC/$prcsc; if(x<1) print 0; x" | bc)
ECrise=0
hvEC=0

CO=1500
COd=$(echo "scale=$sc; x=$CO/$prcsc; if(x<1) print 0; x" | bc)
COrise=0
hvCO=0
COa=$((hvCO / 100))

LPR=3000
LPRd=$(echo "scale=$sc; x=$LPR/$prcsc; if(x<1) print 0; x" | bc)
LPRrise=0
hvLPR=0

CPH=10000
CPHd=$(echo "scale=$sc; x=$CPH/$prcsc; if(x<1) print 0; x" | bc)
CPHrise=0
hvCPH=0


dbs=0.01
game=game
PBrisex=125
PPrisex=25
ECrisex=250
COrisex=750
LPRrisex=1500
CPHrisex=5000

pplra=$(($PPrisex * 2))
pblra=$(($PBrisex * 2))
eclra=$(($ECrisex * 2))
colra=$(($COrisex * 2))
cphlra=$(($CPHrisex * 2))

ppcha=$(($PP / 2))
pbcha=$(($PB / 2))
eccha=$(($EC / 2))
cocha=$(($CO / 2))
lprcha=$(($LPR / 2))

echo variables is ok
sleep $dbs


#--------------------------------------------------------------
#	STATS		STATS		STATS
#--------------------------------------------------------------
function stats {
	clear
	echo STATS
	echo
	echo "Pressing Power's bought:	 $hvPP"
	echo "Progress Blessing's bought:	 $hvPB"
	echo "Extra CPU's bought:		 $hvEC"
	echo "CPU Overclock's bought:		 $hvCO"
	echo "Cut Prices in Half's bought:	 $hvCPH"
	echo "Lower Prices Rise's bought:	 $hvLPR"
	echo
	echo "Out of my face!	[G]"
	_key
	if [ "$_KEY" = "g" ]; then
	 $game
	else
	 stats
	fi
}
#--------------------------------------------------------------
#	RESTART		RESTART		RESTART
#--------------------------------------------------------------
function restart {
	clear
	/bin/bash /home/$USER/loading/start
	exit
}
#--------------------------------------------------------------
#	COLLECT		COLLECT		COLLECT
#--------------------------------------------------------------
function collect {
source /home/$USER/loading/slf$saveslot
	clear
	echo Collecting load from CPU...
	sleep 0.5
	prc=$(($prc + $slf))
	echo slf=0 > /home/$USER/loading/slf$saveslot
	$game
}
echo collect is ok
sleep $dbs
#--------------------------------------------------------------
#	GAME 2		GAME 2		GAME 2
#--------------------------------------------------------------
function game2 {
_end=1000000
prcsc=10000
sc=4
PBad=$(echo "scale=$sc; x=$PBa/$prcsc; if(x<1) print 0; x" | bc)
#PBad1=$(echo "scale=6; x=$PBa1/100; if(x<1) print 0; x" | bc)
pppd=$(echo "scale=$sc; x=$ppp/$prcsc; if(x<1) print 0; x" | bc)
prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	clear
	pb ${prc} ${_end}
	echo
	echo "You have $prcd"%"!"
	echo "You load $pppd"%" each press!"
	echo "You load an extra $PBad"%" each press!"
	echo "Press h for help!"
	if [ $prc -ge 1000000 ]; then
	 stage3
	elif [ $prc -lt 9999 ]; then
	 loststage2
	fi
	_key
	if [ "$_KEY" = "q" ]; then
	 savex
	elif [ "$_KEY" = "s" ]; then
	 shop
	elif [ "$_KEY" = "h" ]; then
	 helpmenu
	elif [ "$_KEY" = "c" ]; then
	 collect
	elif [ "$_KEY" = "x" ]; then
	 back=restart
	 save
	elif [ "$_KEY" = "t" ]; then
	 stats
	fi
	PBap=$(echo "scale=0; x=$prc/10000; if(x<1) print 0; x" | bc)
	#PBap1=$(echo "scale=6; x=$prc/10000; if(x<1) print 0; x" | bc)
	PBa=$(echo "scale=0; x=$PBap*$hvPB; if(x<1) print 0; x" | bc)
	#PBa1=$(echo "scale=6; x=$PBap1*$hvPB; if(x<1) print 0; x" | bc)
	prc=$(($prc+$ppp))
	prc=$(($prc+$PBa))
	$game
}
echo game2 is ok
sleep $dbs
#--------------------------------------------------------------
#	STAGE 2		STAGE 2		STAGE 2
#--------------------------------------------------------------
function stage2 {
	clear
	echo "You've completed Stage 1!"
	sleep 1
	echo "Now , it's time for stage 2..."
	sleep 2
	_end=1000000
	prcsc=10000
	sc=4
	game=game2
	$game
}
echo stage2 is ok
sleep $dbs

function loststage2 {
	clear
	echo "You've lost Stage 2!"
	sleep 1
	echo "Now , it's time for stage 1..."
	sleep 2
	_end=10000
	prcsc=100
	sc=2
	game=game
	$game
}
echo loststage2 is ok
sleep $dbs
#--------------------------------------------------------------
#	SAVE	SAVE	SAVE	SAVE	SAVE	SAVE
#--------------------------------------------------------------
function save {
	clear
	echo game=$game > /home/$USER/loading/$saveslot
	echo prc=$prc >> /home/$USER/loading/$saveslot
	echo ppp=$ppp >> /home/$USER/loading/$saveslot
	echo PP=$PP >> /home/$USER/loading/$saveslot
	echo PPd=$PPd >> /home/$USER/loading/$saveslot
	echo hvPP=$hvPP >> /home/$USER/loading/$saveslot
	echo PB=$PB >> /home/$USER/loading/$saveslot
	echo PBd=$PBd >> /home/$USER/loading/$saveslot
	echo hvPB=$hvPB >> /home/$USER/loading/$saveslot
	echo EC=$EC >> /home/$USER/loading/$saveslot
	echo ECd=$ECd >> /home/$USER/loading/$saveslot
	echo hvEC=$hvEC >> /home/$USER/loading/$saveslot
	echo CO=$CO >> /home/$USER/loading/$saveslot
	echo COd=$COd >> /home/$USER/loading/$saveslot
	echo hvCO=$hvCO >> /home/$USER/loading/$saveslot
	echo CPH=$CPH >> /home/$USER/loading/$saveslot
	echo CPHd=$CPHd >> /home/$USER/loading/$saveslot
	echo hvCPH=$hvCPH >> /home/$USER/loading/$saveslot
	echo LPR=$LPR >> /home/$USER/loading/$saveslot
	echo LPRd=$LPRd >> /home/$USER/loading/$saveslot
	echo hvLPR=$hvLPR >> /home/$USER/loading/$saveslot

	echo PBrisex=$PBrisex >> /home/$USER/loading/$saveslot
	echo PPrisex=$PPrisex >> /home/$USER/loading/$saveslot
	echo ECrisex=$ECrisex >> /home/$USER/loading/$saveslot
	echo LPRrisex=$LPRrisex >> /home/$USER/loading/$saveslot
	echo CPHrisex=$CPHrisex >> /home/$USER/loading/$saveslot
	#echo 
	$back
}
echo save is ok
sleep $dbs
#--------------------------------------------------------------
#	SAVE & EXIT	SAVE & EXIT	SAVE & EXIT
#--------------------------------------------------------------
function savex {
	clear
	echo game=$game > /home/$USER/loading/$saveslot
	echo prc=$prc >> /home/$USER/loading/$saveslot
	echo ppp=$ppp >> /home/$USER/loading/$saveslot
	echo PP=$PP >> /home/$USER/loading/$saveslot
	echo PPd=$PPd >> /home/$USER/loading/$saveslot
	echo hvPP=$hvPP >> /home/$USER/loading/$saveslot
	echo PB=$PB >> /home/$USER/loading/$saveslot
	echo PBd=$PBd >> /home/$USER/loading/$saveslot
	echo hvPB=$hvPB >> /home/$USER/loading/$saveslot
	echo EC=$EC >> /home/$USER/loading/$saveslot
	echo ECd=$ECd >> /home/$USER/loading/$saveslot
	echo hvEC=$hvEC >> /home/$USER/loading/$saveslot
	echo CO=$CO >> /home/$USER/loading/$saveslot
	echo COd=$COd >> /home/$USER/loading/$saveslot
	echo hvCO=$hvCO >> /home/$USER/loading/$saveslot
	echo CPH=$CPH >> /home/$USER/loading/$saveslot
	echo CPHd=$CPHd >> /home/$USER/loading/$saveslot
	echo hvCPH=$hvCPH >> /home/$USER/loading/$saveslot
	echo LPR=$LPR >> /home/$USER/loading/$saveslot
	echo LPRd=$LPRd >> /home/$USER/loading/$saveslot
	echo hvLPR=$hvLPR >> /home/$USER/loading/$saveslot

	echo PBrisex=$PBrisex >> /home/$USER/loading/$saveslot
	echo PPrisex=$PPrisex >> /home/$USER/loading/$saveslot
	echo ECrisex=$ECrisex >> /home/$USER/loading/$saveslot
	echo LPRrisex=$LPRrisex >> /home/$USER/loading/$saveslot
	echo CPHrisex=$CPHrisex >> /home/$USER/loading/$saveslot
	#echo 
	exit
}
echo savex is ok
sleep $dbs
#--------------------------------------------------------------
#	HELP	HELP	HELP	HELP	HELP	HELP
#--------------------------------------------------------------
function helpmenu {
	clear
	echo "HELP"
	echo
	echo "q - Save & Exit the game"
	echo "s - Enter the Shop"
	echo "h - Display this list"
	echo "c - Collect load from CPU"
	echo "x - Restarts the program"
	echo "t - Shows your personal stats"
	echo "g - Gets you back from anywhere"
	echo "[1] - Press that number to go to or do whatever is said before"
	echo "[Y|N] - Press y for Yes or n for No"
	echo
	echo "Out of my face!	[G]"
	_key
	if [ "$_KEY" = "g" ]; then
	 $game
	else
	 helpmenu
	fi
}
echo helpmenu is ok
sleep $dbs
#--------------------------------------------------------------
#	SUPER LOAD MODE		SUPER LOAD MODE
#--------------------------------------------------------------
function shop3 {
CPHd=$(echo "scale=$sc; x=$CPH/$prcsc; if(x<1) print 0; x" | bc)
LPRd=$(echo "scale=$sc; x=$LPR/$prcsc; if(x<1) print 0; x" | bc)
	clear
	echo DISCOUNT
	echo
	echo "Cut prices in half	[1]"	"[$CPHd"%"]"
	echo
	echo "Lower prices rise	[2]"	"[$LPRd"%"]"
	echo	
	echo "Return to Shop		[3]"
	echo "Out of my face!		[G]"
	_key
	if [ "$_KEY" = "1" ]; then
	 shop3-1
	elif [ "$_KEY" = "2" ]; then
	 shop3-2
	elif [ "$_KEY" = "3" ]; then
	 shop
	elif [ "$_KEY" = "g" ]; then
	 $game
	else
	 shop3
	fi
}
echo shop3 is ok
sleep $dbs

function shop3-1 {
	clear
	echo "Cut prices in half"
	echo "This will lower all the prices by 50% (not in currency)"
	echo
	echo "Do you want to buy this for $CPHd"%"? You have $prcd"%"!"
	echo "[Y|N]"
	_key
	if [ "$_KEY" = "y" ]; then
	 back=shop3
	 buy3-1
	elif [ "$_KEY" = "n" ]; then
	 shop3
	elif [ "$_KEY" = "g" ]; then
	 $game
	else
	 shop3-1
	fi
}
echo shop3-1 is ok
sleep $dbs

function shop3-2 {
	clear
	echo "Lower prices rise"
	echo "This will lower the ammount of % increase for all prices"
	echo
	echo "Do you want to buy this for $LPRd"%"? You have $prcd"%"!"
	echo "[Y|N]"
	_key
	if [ "$_KEY" = "y" ]; then
	 back=shop3
	 buy3-2
	elif [ "$_KEY" = "n" ]; then
	 shop3
	elif [ "$_KEY" = "g" ]; then
	 $game
	else
	 shop3-2
	fi
}
echo shop3-2 is ok
sleep $dbs

function buy3-1 {
ppcha=$(($PP / 2))
pbcha=$(($PB / 2))
eccha=$(($EC / 2))
cocha=$(($CO / 2))
lprcha=$(($LPR / 2))
	clear
	if [ $PPrisex -ge $ppcha ]; then
	 echo If you buy this, the price of Pressing Power will go below 0!
	 echo "Do you want to buy this now for $PPd"%"?" "You have $prcd"%"!"
	 echo "[Y|N]"
	 _key
	 if [ "$_KEY" = "y" ]; then
	  back=shop3
	  buy1-1
	 elif [ "$_KEY" = "n" ]; then
	  shop3
	 fi
	else
	 if [ $PBrisex -ge $pbcha ]; then
	  echo If you buy this, the price of Progress Blessing will go below 0!
	  echo "Do you want to buy this now for $PBd"%"?" "You have $prcd"%"!"
	  echo "[Y|N]"
	  _key
	  if [ "$_KEY" = "y" ]; then
	   back=shop3
	   buy1-2
	  elif [ "$_KEY" = "n" ]; then
	   shop3
	  fi
	 else
	  if [ $ECrisex -ge $eccha ]; then
	   echo If you buy this, the price of Extra CPU will go below 0!
	   echo "Do you want to buy this now for $ECd"%"?" "You have $prcd"%"!"
	   echo "[Y|N]"
	   _key
	   if [ "$_KEY" = "y" ]; then
	    back=shop3
	    buy2-1
	   elif [ "$_KEY" = "n" ]; then
	    shop3
	   fi
	  else
	   if [ $COrisex -ge $cocha ]; then
	    echo If you buy this, the price of CPU Overclock will go below 0!
	    echo "Do you want to buy this now for $COd"%"?" "You have $prcd"%"!"
	    echo "[Y|N]"
	    _key
	    if [ "$_KEY" = "y" ]; then
	     back=shop3
	     buy2-2
	    elif [ "$_KEY" = "n" ]; then
	     shop3
	    fi
	   else
	    if [ $LPRrisex -ge $lprcha ]; then
	     echo If you buy this, the price of Lower prices Rise will go below 0!
	     echo "Do you want to buy this now for $LPRd"%"?" "You have $prcd"%"!"
	     echo "[Y|N]"
	     _key
	     if [ "$_KEY" = "y" ]; then
	      back=shop3
	      buy3-2
	     elif [ "$_KEY" = "n" ]; then
	      shop3
	     fi
	    else
	     back=shop3
	     buy3-1a
	    fi
	   fi
	  fi
	 fi
	fi
}
echo buy3-1 is ok
sleep $dbs

function buy3-1a {
	clear
	if [ $prc -ge $CPH ]; then
	 prc=$(($prc - $CPH))
	 CPHrise=$(($CPH - $CPHrisex))
	 CPH=$(($CPH + $CPHrise))
	 hvCPH=$(($hvCPH + 1))
	 CPHd=$(echo "scale=$sc; x=$CPH/$prcsc; if(x<1) print 0; x" | bc)
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	 PP=$(($PP / 2))
	 PB=$(($PB / 2))
	 EC=$(($EC / 2))
	 CO=$(($CO / 2))
	 LPR=$(($LPR / 2))
	 save
	else
	 clear
	 echo You do not have enough cash...
	 sleep 1
	 shop3
	fi
}
echo buy3-1a is ok
sleep $dbs

function buy3-2 {
pplra=$(($PPrisex * 2))
pblra=$(($PBrisex * 2))
eclra=$(($ECrisex * 2))
colra=$(($COrisex * 2))
cphlra=$(($CPHrisex * 2))
	clear
	if [ $pplra -ge $PP ]; then
	 echo If you buy this, the price of Pressing Power will go below 0!
	 echo "Do you want to buy this now for $PPd"%"?" "You have $prcd"%"!"
	 echo "[Y|N]"
	 _key
	 if [ "$_KEY" = "y" ]; then
	  back=shop3
	  buy1-1
	 elif [ "$_KEY" = "n" ]; then
	  shop3
	 fi
	else
	 if [ $pblra -ge $PB ]; then
	  echo If you buy this, the price of Progress Blessing will go below 0!
	  echo "Do you want to buy this now for $PBd"%"?" "You have $prcd"%"!"
	  echo "[Y|N]"
	  _key
	  if [ "$_KEY" = "y" ]; then
	   back=shop3
	   buy1-2
	  elif [ "$_KEY" = "n" ]; then
	   shop3
	  fi
	 else
	  if [ $eclra -ge $EC ]; then
	   echo If you buy this, the price of Extra CPU will go below 0!
	   echo "Do you want to buy this now for $ECd"%"?" "You have $prcd"%"!"
	   echo "[Y|N]"
	   _key
	   if [ "$_KEY" = "y" ]; then
	    back=shop3
	    buy2-1
	   elif [ "$_KEY" = "n" ]; then
	    shop3
	   fi
	  else
	   if [ $colra -ge $CO ]; then
	    echo If you buy this, the price of CPU Overclock will go below 0!
	    echo "Do you want to buy this now for $COd"%"?" "You have $prcd"%"!"
	    echo "[Y|N]"
	    _key
	    if [ "$_KEY" = "y" ]; then
	     back=shop3
	     buy2-2
	    elif [ "$_KEY" = "n" ]; then
	     shop3
	    fi
	   else
	    if [ $cphlra -ge $CPH ]; then
	     echo "If you buy this, the price of Cut Prices in Half will go below 0!"
	     echo "Do you want to buy this now for $CPHd"%"?" "You have $prcd"%"!"
	     echo "[Y|N]"
	     _key
	     if [ "$_KEY" = "y" ]; then
	      back=shop3
	      buy3-1
	     elif [ "$_KEY" = "n" ]; then
	      shop3
	     fi
	    else
	     back=shop3
	     buy3-2a
	    fi
	   fi
	  fi
	 fi
	fi
}
echo buy3-2 is ok
sleep $dbs

function buy3-2a {
	clear
	if [ $prc -ge $LPR ]; then
	 prc=$(($prc - $LPR))
	 LPRrise=$(($LPR - $LPRrisex))
	 LPR=$(($LPR + $LPRrise))
	 hvLPR=$(($hvLPR + 1))
	 LPRd=$(echo "scale=$sc; x=$LPR/$prcsc; if(x<1) print 0; x" | bc)
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	 PPrisex=$(($PPrisex * 2))
	 PBrisex=$(($PBrisex * 2))
	 ECrisex=$(($ECrisex * 2))
	 COrisex=$(($COrisex * 2))
	 CPHrisex=$(($CPHrisex * 2))
	 save
	else
	 clear
	 echo You do not have enough cash...
	 sleep 1
	 shop3
	fi
}
echo buy3-2a is ok
sleep $dbs
#--------------------------------------------------------------
#	SELF LOAD	SELF LOAD	SELF LOAD
#--------------------------------------------------------------
function shop2 {
ECd=$(echo "scale=$sc; x=$EC/$prcsc; if(x<1) print 0; x" | bc)
COd=$(echo "scale=$sc; x=$CO/$prcsc; if(x<1) print 0; x" | bc)
	clear
	echo SELF LOAD
	echo
	echo "Extra CPU		[1]"	"[$ECd"%"]"
	echo
	echo "CPU Overclock		[2]"	"[$COd"%"]"
	echo
	echo "Return to Shop		[3]"
	echo "Out of my face!		[G]"
	_key
	if [ "$_KEY" = "1" ]; then
	 shop2-1
	elif [ "$_KEY" = "2" ]; then
	 shop2-2
	elif [ "$_KEY" = "3" ]; then
	 shop
	elif [ "$_KEY" = "g" ]; then
	 $game
	else
	 shop2
	fi
}
echo shop2 is ok
sleep $dbs

function shop2-1 {
	clear
	echo "Extra CPU"
	echo "You'll load an extra 0.01% each second"
	echo
	echo "Do you want to buy this for $ECd"%"? You have $prcd"%"!"
	echo "[Y|N]"
	_key
	if [ "$_KEY" = "y" ]; then
	 back=shop2
	 buy2-1
	elif [ "$_KEY" = "n" ]; then
	 shop2
	elif [ "$_KEY" = "g" ]; then
	 $game
	else
	 shop2-1
	fi
}
echo shop2-1 is ok
sleep $dbs

function buy2-1 {
	clear
	if [ $prc -ge $EC ]; then
	 prc=$(($prc - $EC))
	 ECrise=$(($EC - $ECrisex))
	 EC=$(($EC + $ECrise))
	 hvEC=$(($hvEC + 1))
	 ECd=$(echo "scale=$sc; x=$EC/$prcsc; if(x<1) print 0; x" | bc)
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	 save
	else
	 clear
	 echo You do not have enough cash...
	 sleep 1
	 shop2
	fi
}
echo buy2-1 is ok
sleep $dbs

function shop2-2 {
	clear
	echo "CPU Overclock"
	echo "Your CPU will load 0.01 seconds faster"
	echo
	echo "Do you want to buy this for $COd"%"? You have $prcd"%"!"
	echo "[Y|N]"
	_key
	if [ "$_KEY" = "y" ]; then
	 back=shop2
	 buy2-2
	elif [ "$_KEY" = "n" ]; then
	 shop2
	elif [ "$_KEY" = "g" ]; then
	 $game
	else
	 shop2-2
	fi
}
echo shop2-1 is ok
sleep $dbs

function buy2-2 {
	clear
	if [ $prc -ge $CO ]; then
	 prc=$(($prc - $CO))
	 COrise=$(($CO - $COrisex))
	 CO=$(($CO + $COrise))
	 hvCO=$(($hvCO + 1))
	 COa=$((hvCO / 100))
	 COd=$(echo "scale=$sc; x=$CO/$prcsc; if(x<1) print 0; x" | bc)
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	 save
	else
	 clear
	 echo You do not have enough cash...
	 sleep 1
	 shop2
	fi
}
echo buy2-2 is ok
sleep $dbs
#--------------------------------------------------------------
#	LOAD POWER	LOAD POWER	LOAD POWER
#--------------------------------------------------------------
function shop1 {
PPd=$(echo "scale=$sc; x=$PP/$prcsc; if(x<1) print 0; x" | bc)
PBd=$(echo "scale=$sc; x=$PB/$prcsc; if(x<1) print 0; x" | bc)
	clear
	echo LOAD POWER
	echo
	echo "Pressing Power		[1]"	"[$PPd"%"]"
	echo "You'll load an extra 0.01% each time you press a button!"
	echo
	echo "Progress Blessing	[2]"	"[$PBd"%"]"
	echo "The more progress you've made the more % loaded each time you press a button!"
	echo
	echo "Return to Shop		[3]"
	echo "Out of my face!		[G]"
	_key
	if [ "$_KEY" = "1" ]; then
	 shop1-1
	elif [ "$_KEY" = "2" ]; then
	 shop1-2
	elif [ "$_KEY" = "3" ]; then
	 shop
	elif [ "$_KEY" = "g" ]; then
	 $game
	else
	 shop1
	fi
}
echo shop1 is ok
sleep $dbs

function shop1-1 {
	clear
	echo "Pressing Power"
	echo "You'll load an extra 0.01% each time you press a button!"
	echo
	echo "Do you want to buy this for $PPd"%"? You have $prcd"%"!"
	echo "[Y|N]"
	_key
	if [ "$_KEY" = "y" ]; then
	 back=shop1
	 buy1-1
	elif [ "$_KEY" = "n" ]; then
	 shop1
	elif [ "$_KEY" = "g" ]; then
	 $game
	else
	 shop1-1
	fi
}
echo shop1-1 is ok
sleep $dbs

function shop1-2 {
	clear
	echo "Progress Blessing"
	echo "The more progress you've made the more % loaded each time you press a button!"
	echo
	echo "Do you want to buy this for $PBd"%"? You have $prcd"%"!"
	echo "[Y|N]"
	_key
	if [ "$_KEY" = "y" ]; then
	 back=shop1
	 buy1-2
	elif [ "$_KEY" = "n" ]; then
	 shop1
	elif [ "$_KEY" = "g" ]; then
	 $game
	else
	 shop1-2
	fi
}
echo shop1-2 is ok
sleep $dbs

function buy1-1 {
	clear
	if [ $prc -ge $PP ]; then
	 prc=$(($prc - $PP))
	 PPrise=$(($PP - $PPrisex))
	 PP=$(($PP + $PPrise))
	 hvPP=$(($hvPP + 1))
	 ppp=$(($ppp + 1))
	 PPd=$(echo "scale=$sc; x=$PP/$prcsc; if(x<1) print 0; x" | bc)
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	 pppd=$(echo "scale=$sc; x=$ppp/$prcsc; if(x<1) print 0; x" | bc)
	 save
	else
	 clear
	 echo You do not have enough cash...
	 sleep 1
	 shop1
	fi
}
echo buy1-1 is ok
sleep $dbs

function buy1-2 {
	clear
	if [ $prc -ge $PB ]; then
	 prc=$(($prc - $PB))
	 PBrise=$(($PB - $PBrisex))
	 PB=$(($PB + $PBrise))
	 hvPB=$(($hvPB + 1))
	 PBd=$(echo "scale=$sc; x=$PB/$prcsc; if(x<1) print 0; x" | bc)
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	 save
	else
	 clear
	 echo You do not have enough cash...
	 sleep 1
	 shop1
	fi
}
echo buy1-2 is ok
sleep $dbs
#--------------------------------------------------------------
#	SHOP	SHOP	SHOP	SHOP	SHOP	SHOP
#--------------------------------------------------------------
function shop {
	clear
	echo "SHOP"
	echo
	echo "Load Power 	[1]"
	echo "Self Load 	[2]"
	echo "Super Load Mode	[3]"
	echo "Out of my face!	[G]"
	_key
	if [ "$_KEY" = "1" ]; then
	 shop1
	elif [ "$_KEY" = "2" ]; then
	 shop2
	elif [ "$_KEY" = "3" ]; then
	 shop3
	elif [ "$_KEY" = "g" ]; then
	 $game
	else
	 shop
	fi
}
echo shop is ok
sleep $dbs
#--------------------------------------------------------------
#	PROGRESS BAR	PROGRESS BAR	PROGRESS BAR
#--------------------------------------------------------------
function pb {
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*4)/10
    let _left=40-$_done
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"

}

_start=1

_end=10000

#printf '\nFinished!\n'
echo pb is ok
sleep $dbs
#--------------------------------------------------------------
#	GAME	GAME	GAME	GAME	GAME	GAME
#--------------------------------------------------------------
function game {
PBad=$(echo "scale=$sc; x=$PBa/$prcsc; if(x<1) print 0; x" | bc)
pppd=$(echo "scale=$sc; x=$ppp/$prcsc; if(x<1) print 0; x" | bc)
prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	clear
	pb ${prc} ${_end}
	echo
	echo "You have $prcd"%"!"
	echo "You load $pppd"%" each press!"
	echo "You load an extra $PBad"%" each press!"
	echo "Press h for help!"
	if [ $prc -ge 10000 ]; then
	 stage2
	fi
	_key
	if [ "$_KEY" = "q" ]; then
	 savex
	elif [ "$_KEY" = "s" ]; then
	 shop
	elif [ "$_KEY" = "h" ]; then
	 helpmenu
	elif [ "$_KEY" = "c" ]; then
	 collect
	elif [ "$_KEY" = "x" ]; then
	 back=restart
	 save
	elif [ "$_KEY" = "t" ]; then
	 stats
	fi
	PBap=0
	PBa=0
	PBap=$(echo "scale=0; x=$prc/10000; if(x<1) print 0; x" | bc)
	PBa=$(echo "scale=0; x=$PBap*$hvPB; if(x<1) print 0; x" | bc)
	prc=$(($prc+$ppp))
	prc=$(($prc+$PBa))
	$game
}
echo game is ok
sleep $dbs
#--------------------------------------------------------------
#	SELECT SAVE	SELECT SAVE	SELECT SAVE
#--------------------------------------------------------------
function selectsave {
	clear
	 source /home/$USER/loading/save1
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	echo Load Saved Slot 1	[1]	[$prcd"%"]
	 source /home/$USER/loading/save2
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	echo Load Saved Slot 2	[2]	[$prcd"%"]
	 source /home/$USER/loading/save3
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	echo Load Saved Slot 3	[3]	[$prcd"%"]
	echo
	echo Delete Save Slot	[x]
	_key
	if [ "$_KEY" = "1" ]; then
	 source /home/$USER/loading/save1
	 saveslot=save1
	 echo saveslot=save1 > /home/$USER/loading/saveslot
	 $game
	elif [ "$_KEY" = "2" ]; then
	 source /home/snglol/loading/save2
	 saveslot=save2
	 echo saveslot=save2 > /home/$USER/loading/saveslot
	 $game
	elif [ "$_KEY" = "3" ]; then
	 source /home/snglol/loading/save3
	 saveslot=save3
	 echo saveslot=save2 > /home/$USER/loading/saveslot
	 $game
	elif [ "$_KEY" = "x" ]; then
	 deletesave
	else
	 selectsave
	fi
}
echo selectsave is ok
sleep $dbs

function deletesave {
	clear
	 source /home/$USER/loading/save1
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	echo Delete Save Slot 1	[1]	[$prcd"%"]
	 source /home/$USER/loading/save2
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	echo Delete Save Slot 2 [2]	[$prcd"%"]
	 source /home/$USER/loading/save3
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	echo Delete Save Slot 3	[3]	[$prcd"%"]
	_key
	if [ "$_KEY" = "1" ]; then
	 source /home/$USER/loading/save1
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	 clear
	 echo "You currently have $prcd"%" in Save Slot 1!"
	 echo Are you shure?
	 echo "[Y|N]"
	 _key
	 if [ "$_KEY" = "y" ]; then
	  echo prc=0 > /home/$USER/loading/save1
	  restart
	 elif [ "$_KEY" = "n" ]; then
	  selectsave
	 else
	  deletesave
	 fi
	elif [ "$_KEY" = "2" ]; then
	 source /home/$USER/loading/save2
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	 clear
	 echo "You currently have $prcd"%" in Save Slot 2!"
	 echo Are you shure?
	 echo "[Y|N]"
	 _key
	 if [ "$_KEY" = "y" ]; then
	  echo prc=0 > /home/$USER/loading/save2
	  restart
	 elif [ "$_KEY" = "n" ]; then
	  selectsave
	 else
	  deletesave
	 fi
	elif [ "$_KEY" = "3" ]; then
	 source /home/$USER/loading/save3
	 prcd=$(echo "scale=$sc; x=$prc/$prcsc; if(x<1) print 0; x" | bc)
	 clear
	 echo "You currently have $prcd"%" in Save Slot 3!"
	 echo Are you shure?
	 echo "[Y|N]"
	 _key
	 if [ "$_KEY" = "y" ]; then
	  echo prc=0 > /home/$USER/loading/save3
	  restart
	 elif [ "$_KEY" = "n" ]; then
	  selectsave
	 else
	  deletesave
	 fi
	else
	 deletesave
	fi
}
echo deletesave is ok
sleep $dbs
#--------------------------------------------------------------
#	STARTUP		STARTUP		STARTUP
#--------------------------------------------------------------
clear
echo "Punch your keyboard to start!"
#--------------------------------------------------------------
#	USER INPUT	USER INPUT	USER INPUT
#--------------------------------------------------------------
_key()
{
  local kp
  ESC=$'\e'
  _KEY=
  read -d '' -sn1 _KEY
  case $_KEY in
    "$ESC")
        while read -d '' -sn1 -t1 kp
        do
          _KEY=$_KEY$kp
          case $kp in
            [a-zA-NP-Z~]) break;;
          esac
        done
    ;;
  esac
  printf -v "${1:-_KEY}" "%s" "$_KEY"
}
 
_key x
 

case $x in
  $'\e[11~' | $'\e[OP') key=F1 ;;
  $'\e[12~' | $'\e[OQ') key=F2 ;;
  $'\e[13~' | $'\e[OR') key=F3 ;;
  $'\e[14~' | $'\e[OS') key=F4 ;;
  $'\e[15~') key=F5 ;;
  $'\e[16~') key=F6 ;;
  $'\e[17~') key=F7 ;;
  $'\e[18~') key=F8 ;;
  $'\e[19~') key=F9 ;;
  $'\e[20~') key=F10 ;;
  $'\e[21~') key=F11 ;;
  $'\e[22~') key=F12 ;;
  $'\e[A' ) key=UP ;;
  $'\e[B' ) key=DOWN ;;
  $'\e[C' ) key=RIGHT ;;
  $'\e[D' ) key=LEFT ;;
  ?) key=$x ;;
  *) key=??? ;;
esac
#--------------------------------------------------------------
#	???	???	???	???	???	???
#--------------------------------------------------------------
selectsave
